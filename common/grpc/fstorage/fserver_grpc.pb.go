// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: common/api/fserver.proto

package fstorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GophKeeperFStorage_GetFileDownloadURL_FullMethodName = "/common.grpc.fstorage.GophKeeperFStorage/GetFileDownloadURL"
	GophKeeperFStorage_GetFileUploadURL_FullMethodName   = "/common.grpc.fstorage.GophKeeperFStorage/GetFileUploadURL"
	GophKeeperFStorage_CompleteFileUpload_FullMethodName = "/common.grpc.fstorage.GophKeeperFStorage/CompleteFileUpload"
	GophKeeperFStorage_AbortFileUpload_FullMethodName    = "/common.grpc.fstorage.GophKeeperFStorage/AbortFileUpload"
)

// GophKeeperFStorageClient is the client API for GophKeeperFStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophKeeperFStorageClient interface {
	GetFileDownloadURL(ctx context.Context, in *GetFileDownloadURLRequest, opts ...grpc.CallOption) (*GetFileDownloadURLResponse, error)
	GetFileUploadURL(ctx context.Context, in *GetFileUploadURLRequest, opts ...grpc.CallOption) (*GetFileUploadURLResponse, error)
	CompleteFileUpload(ctx context.Context, in *CompleteFileUploadRequest, opts ...grpc.CallOption) (*CompleteFileUploadResponse, error)
	AbortFileUpload(ctx context.Context, in *AbortFileUploadRequest, opts ...grpc.CallOption) (*AbortFileUploadResponse, error)
}

type gophKeeperFStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewGophKeeperFStorageClient(cc grpc.ClientConnInterface) GophKeeperFStorageClient {
	return &gophKeeperFStorageClient{cc}
}

func (c *gophKeeperFStorageClient) GetFileDownloadURL(ctx context.Context, in *GetFileDownloadURLRequest, opts ...grpc.CallOption) (*GetFileDownloadURLResponse, error) {
	out := new(GetFileDownloadURLResponse)
	err := c.cc.Invoke(ctx, GophKeeperFStorage_GetFileDownloadURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperFStorageClient) GetFileUploadURL(ctx context.Context, in *GetFileUploadURLRequest, opts ...grpc.CallOption) (*GetFileUploadURLResponse, error) {
	out := new(GetFileUploadURLResponse)
	err := c.cc.Invoke(ctx, GophKeeperFStorage_GetFileUploadURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperFStorageClient) CompleteFileUpload(ctx context.Context, in *CompleteFileUploadRequest, opts ...grpc.CallOption) (*CompleteFileUploadResponse, error) {
	out := new(CompleteFileUploadResponse)
	err := c.cc.Invoke(ctx, GophKeeperFStorage_CompleteFileUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperFStorageClient) AbortFileUpload(ctx context.Context, in *AbortFileUploadRequest, opts ...grpc.CallOption) (*AbortFileUploadResponse, error) {
	out := new(AbortFileUploadResponse)
	err := c.cc.Invoke(ctx, GophKeeperFStorage_AbortFileUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophKeeperFStorageServer is the server API for GophKeeperFStorage service.
// All implementations must embed UnimplementedGophKeeperFStorageServer
// for forward compatibility
type GophKeeperFStorageServer interface {
	GetFileDownloadURL(context.Context, *GetFileDownloadURLRequest) (*GetFileDownloadURLResponse, error)
	GetFileUploadURL(context.Context, *GetFileUploadURLRequest) (*GetFileUploadURLResponse, error)
	CompleteFileUpload(context.Context, *CompleteFileUploadRequest) (*CompleteFileUploadResponse, error)
	AbortFileUpload(context.Context, *AbortFileUploadRequest) (*AbortFileUploadResponse, error)
	mustEmbedUnimplementedGophKeeperFStorageServer()
}

// UnimplementedGophKeeperFStorageServer must be embedded to have forward compatible implementations.
type UnimplementedGophKeeperFStorageServer struct {
}

func (UnimplementedGophKeeperFStorageServer) GetFileDownloadURL(context.Context, *GetFileDownloadURLRequest) (*GetFileDownloadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileDownloadURL not implemented")
}
func (UnimplementedGophKeeperFStorageServer) GetFileUploadURL(context.Context, *GetFileUploadURLRequest) (*GetFileUploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileUploadURL not implemented")
}
func (UnimplementedGophKeeperFStorageServer) CompleteFileUpload(context.Context, *CompleteFileUploadRequest) (*CompleteFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteFileUpload not implemented")
}
func (UnimplementedGophKeeperFStorageServer) AbortFileUpload(context.Context, *AbortFileUploadRequest) (*AbortFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortFileUpload not implemented")
}
func (UnimplementedGophKeeperFStorageServer) mustEmbedUnimplementedGophKeeperFStorageServer() {}

// UnsafeGophKeeperFStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophKeeperFStorageServer will
// result in compilation errors.
type UnsafeGophKeeperFStorageServer interface {
	mustEmbedUnimplementedGophKeeperFStorageServer()
}

func RegisterGophKeeperFStorageServer(s grpc.ServiceRegistrar, srv GophKeeperFStorageServer) {
	s.RegisterService(&GophKeeperFStorage_ServiceDesc, srv)
}

func _GophKeeperFStorage_GetFileDownloadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileDownloadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperFStorageServer).GetFileDownloadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperFStorage_GetFileDownloadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperFStorageServer).GetFileDownloadURL(ctx, req.(*GetFileDownloadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperFStorage_GetFileUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperFStorageServer).GetFileUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperFStorage_GetFileUploadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperFStorageServer).GetFileUploadURL(ctx, req.(*GetFileUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperFStorage_CompleteFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperFStorageServer).CompleteFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperFStorage_CompleteFileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperFStorageServer).CompleteFileUpload(ctx, req.(*CompleteFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperFStorage_AbortFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperFStorageServer).AbortFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperFStorage_AbortFileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperFStorageServer).AbortFileUpload(ctx, req.(*AbortFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GophKeeperFStorage_ServiceDesc is the grpc.ServiceDesc for GophKeeperFStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophKeeperFStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.grpc.fstorage.GophKeeperFStorage",
	HandlerType: (*GophKeeperFStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileDownloadURL",
			Handler:    _GophKeeperFStorage_GetFileDownloadURL_Handler,
		},
		{
			MethodName: "GetFileUploadURL",
			Handler:    _GophKeeperFStorage_GetFileUploadURL_Handler,
		},
		{
			MethodName: "CompleteFileUpload",
			Handler:    _GophKeeperFStorage_CompleteFileUpload_Handler,
		},
		{
			MethodName: "AbortFileUpload",
			Handler:    _GophKeeperFStorage_AbortFileUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/api/fserver.proto",
}
