// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: common/api/fserver.proto

package fstorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GophKeeperFStorage_GetDownloadURL_FullMethodName = "/common.grpc.fstorage.GophKeeperFStorage/GetDownloadURL"
	GophKeeperFStorage_GetUploadURL_FullMethodName   = "/common.grpc.fstorage.GophKeeperFStorage/GetUploadURL"
	GophKeeperFStorage_CompleteUpload_FullMethodName = "/common.grpc.fstorage.GophKeeperFStorage/CompleteUpload"
	GophKeeperFStorage_AbortUpload_FullMethodName    = "/common.grpc.fstorage.GophKeeperFStorage/AbortUpload"
	GophKeeperFStorage_Delete_FullMethodName         = "/common.grpc.fstorage.GophKeeperFStorage/Delete"
)

// GophKeeperFStorageClient is the client API for GophKeeperFStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophKeeperFStorageClient interface {
	GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...grpc.CallOption) (*GetDownloadURLResponse, error)
	GetUploadURL(ctx context.Context, in *GetUploadURLRequest, opts ...grpc.CallOption) (*GetUploadURLResponse, error)
	CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error)
	AbortUpload(ctx context.Context, in *AbortUploadRequest, opts ...grpc.CallOption) (*AbortUploadResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type gophKeeperFStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewGophKeeperFStorageClient(cc grpc.ClientConnInterface) GophKeeperFStorageClient {
	return &gophKeeperFStorageClient{cc}
}

func (c *gophKeeperFStorageClient) GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...grpc.CallOption) (*GetDownloadURLResponse, error) {
	out := new(GetDownloadURLResponse)
	err := c.cc.Invoke(ctx, GophKeeperFStorage_GetDownloadURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperFStorageClient) GetUploadURL(ctx context.Context, in *GetUploadURLRequest, opts ...grpc.CallOption) (*GetUploadURLResponse, error) {
	out := new(GetUploadURLResponse)
	err := c.cc.Invoke(ctx, GophKeeperFStorage_GetUploadURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperFStorageClient) CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error) {
	out := new(CompleteUploadResponse)
	err := c.cc.Invoke(ctx, GophKeeperFStorage_CompleteUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperFStorageClient) AbortUpload(ctx context.Context, in *AbortUploadRequest, opts ...grpc.CallOption) (*AbortUploadResponse, error) {
	out := new(AbortUploadResponse)
	err := c.cc.Invoke(ctx, GophKeeperFStorage_AbortUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperFStorageClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, GophKeeperFStorage_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophKeeperFStorageServer is the server API for GophKeeperFStorage service.
// All implementations must embed UnimplementedGophKeeperFStorageServer
// for forward compatibility
type GophKeeperFStorageServer interface {
	GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error)
	GetUploadURL(context.Context, *GetUploadURLRequest) (*GetUploadURLResponse, error)
	CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error)
	AbortUpload(context.Context, *AbortUploadRequest) (*AbortUploadResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedGophKeeperFStorageServer()
}

// UnimplementedGophKeeperFStorageServer must be embedded to have forward compatible implementations.
type UnimplementedGophKeeperFStorageServer struct {
}

func (UnimplementedGophKeeperFStorageServer) GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadURL not implemented")
}
func (UnimplementedGophKeeperFStorageServer) GetUploadURL(context.Context, *GetUploadURLRequest) (*GetUploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadURL not implemented")
}
func (UnimplementedGophKeeperFStorageServer) CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUpload not implemented")
}
func (UnimplementedGophKeeperFStorageServer) AbortUpload(context.Context, *AbortUploadRequest) (*AbortUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortUpload not implemented")
}
func (UnimplementedGophKeeperFStorageServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGophKeeperFStorageServer) mustEmbedUnimplementedGophKeeperFStorageServer() {}

// UnsafeGophKeeperFStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophKeeperFStorageServer will
// result in compilation errors.
type UnsafeGophKeeperFStorageServer interface {
	mustEmbedUnimplementedGophKeeperFStorageServer()
}

func RegisterGophKeeperFStorageServer(s grpc.ServiceRegistrar, srv GophKeeperFStorageServer) {
	s.RegisterService(&GophKeeperFStorage_ServiceDesc, srv)
}

func _GophKeeperFStorage_GetDownloadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperFStorageServer).GetDownloadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperFStorage_GetDownloadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperFStorageServer).GetDownloadURL(ctx, req.(*GetDownloadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperFStorage_GetUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperFStorageServer).GetUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperFStorage_GetUploadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperFStorageServer).GetUploadURL(ctx, req.(*GetUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperFStorage_CompleteUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperFStorageServer).CompleteUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperFStorage_CompleteUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperFStorageServer).CompleteUpload(ctx, req.(*CompleteUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperFStorage_AbortUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperFStorageServer).AbortUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperFStorage_AbortUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperFStorageServer).AbortUpload(ctx, req.(*AbortUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperFStorage_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperFStorageServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperFStorage_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperFStorageServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GophKeeperFStorage_ServiceDesc is the grpc.ServiceDesc for GophKeeperFStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophKeeperFStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.grpc.fstorage.GophKeeperFStorage",
	HandlerType: (*GophKeeperFStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDownloadURL",
			Handler:    _GophKeeperFStorage_GetDownloadURL_Handler,
		},
		{
			MethodName: "GetUploadURL",
			Handler:    _GophKeeperFStorage_GetUploadURL_Handler,
		},
		{
			MethodName: "CompleteUpload",
			Handler:    _GophKeeperFStorage_CompleteUpload_Handler,
		},
		{
			MethodName: "AbortUpload",
			Handler:    _GophKeeperFStorage_AbortUpload_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GophKeeperFStorage_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/api/fserver.proto",
}
