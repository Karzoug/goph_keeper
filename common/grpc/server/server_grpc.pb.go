// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: common/api/server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GophKeeperServer_Register_FullMethodName                    = "/common.grpc.server.GophKeeperServer/Register"
	GophKeeperServer_Login_FullMethodName                       = "/common.grpc.server.GophKeeperServer/Login"
	GophKeeperServer_ListVaultItems_FullMethodName              = "/common.grpc.server.GophKeeperServer/ListVaultItems"
	GophKeeperServer_SetVaultItem_FullMethodName                = "/common.grpc.server.GophKeeperServer/SetVaultItem"
	GophKeeperServer_GetFileDownloadURL_FullMethodName          = "/common.grpc.server.GophKeeperServer/GetFileDownloadURL"
	GophKeeperServer_GetFileUploadURLs_FullMethodName           = "/common.grpc.server.GophKeeperServer/GetFileUploadURLs"
	GophKeeperServer_CompleteMultipartFileUpload_FullMethodName = "/common.grpc.server.GophKeeperServer/CompleteMultipartFileUpload"
	GophKeeperServer_AbortMultipartFileUpload_FullMethodName    = "/common.grpc.server.GophKeeperServer/AbortMultipartFileUpload"
)

// GophKeeperServerClient is the client API for GophKeeperServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophKeeperServerClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ListVaultItems(ctx context.Context, in *ListVaultItemsRequest, opts ...grpc.CallOption) (*ListVaultItemsResponse, error)
	SetVaultItem(ctx context.Context, in *SetVaultItemRequest, opts ...grpc.CallOption) (*SetVaultItemResponse, error)
	GetFileDownloadURL(ctx context.Context, in *GetFileDownloadURLRequest, opts ...grpc.CallOption) (*GetFileDownloadURLResponse, error)
	GetFileUploadURLs(ctx context.Context, in *GetFileUploadURLsRequest, opts ...grpc.CallOption) (*GetFileUploadURLsResponse, error)
	CompleteMultipartFileUpload(ctx context.Context, in *CompleteMultipartFileUploadRequest, opts ...grpc.CallOption) (*CompleteMultipartFileUploadResponse, error)
	AbortMultipartFileUpload(ctx context.Context, in *AbortMultipartFileUploadRequest, opts ...grpc.CallOption) (*AbortMultipartFileUploadResponse, error)
}

type gophKeeperServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGophKeeperServerClient(cc grpc.ClientConnInterface) GophKeeperServerClient {
	return &gophKeeperServerClient{cc}
}

func (c *gophKeeperServerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, GophKeeperServer_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, GophKeeperServer_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServerClient) ListVaultItems(ctx context.Context, in *ListVaultItemsRequest, opts ...grpc.CallOption) (*ListVaultItemsResponse, error) {
	out := new(ListVaultItemsResponse)
	err := c.cc.Invoke(ctx, GophKeeperServer_ListVaultItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServerClient) SetVaultItem(ctx context.Context, in *SetVaultItemRequest, opts ...grpc.CallOption) (*SetVaultItemResponse, error) {
	out := new(SetVaultItemResponse)
	err := c.cc.Invoke(ctx, GophKeeperServer_SetVaultItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServerClient) GetFileDownloadURL(ctx context.Context, in *GetFileDownloadURLRequest, opts ...grpc.CallOption) (*GetFileDownloadURLResponse, error) {
	out := new(GetFileDownloadURLResponse)
	err := c.cc.Invoke(ctx, GophKeeperServer_GetFileDownloadURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServerClient) GetFileUploadURLs(ctx context.Context, in *GetFileUploadURLsRequest, opts ...grpc.CallOption) (*GetFileUploadURLsResponse, error) {
	out := new(GetFileUploadURLsResponse)
	err := c.cc.Invoke(ctx, GophKeeperServer_GetFileUploadURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServerClient) CompleteMultipartFileUpload(ctx context.Context, in *CompleteMultipartFileUploadRequest, opts ...grpc.CallOption) (*CompleteMultipartFileUploadResponse, error) {
	out := new(CompleteMultipartFileUploadResponse)
	err := c.cc.Invoke(ctx, GophKeeperServer_CompleteMultipartFileUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperServerClient) AbortMultipartFileUpload(ctx context.Context, in *AbortMultipartFileUploadRequest, opts ...grpc.CallOption) (*AbortMultipartFileUploadResponse, error) {
	out := new(AbortMultipartFileUploadResponse)
	err := c.cc.Invoke(ctx, GophKeeperServer_AbortMultipartFileUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophKeeperServerServer is the server API for GophKeeperServer service.
// All implementations must embed UnimplementedGophKeeperServerServer
// for forward compatibility
type GophKeeperServerServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	ListVaultItems(context.Context, *ListVaultItemsRequest) (*ListVaultItemsResponse, error)
	SetVaultItem(context.Context, *SetVaultItemRequest) (*SetVaultItemResponse, error)
	GetFileDownloadURL(context.Context, *GetFileDownloadURLRequest) (*GetFileDownloadURLResponse, error)
	GetFileUploadURLs(context.Context, *GetFileUploadURLsRequest) (*GetFileUploadURLsResponse, error)
	CompleteMultipartFileUpload(context.Context, *CompleteMultipartFileUploadRequest) (*CompleteMultipartFileUploadResponse, error)
	AbortMultipartFileUpload(context.Context, *AbortMultipartFileUploadRequest) (*AbortMultipartFileUploadResponse, error)
	mustEmbedUnimplementedGophKeeperServerServer()
}

// UnimplementedGophKeeperServerServer must be embedded to have forward compatible implementations.
type UnimplementedGophKeeperServerServer struct {
}

func (UnimplementedGophKeeperServerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGophKeeperServerServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGophKeeperServerServer) ListVaultItems(context.Context, *ListVaultItemsRequest) (*ListVaultItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVaultItems not implemented")
}
func (UnimplementedGophKeeperServerServer) SetVaultItem(context.Context, *SetVaultItemRequest) (*SetVaultItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVaultItem not implemented")
}
func (UnimplementedGophKeeperServerServer) GetFileDownloadURL(context.Context, *GetFileDownloadURLRequest) (*GetFileDownloadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileDownloadURL not implemented")
}
func (UnimplementedGophKeeperServerServer) GetFileUploadURLs(context.Context, *GetFileUploadURLsRequest) (*GetFileUploadURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileUploadURLs not implemented")
}
func (UnimplementedGophKeeperServerServer) CompleteMultipartFileUpload(context.Context, *CompleteMultipartFileUploadRequest) (*CompleteMultipartFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMultipartFileUpload not implemented")
}
func (UnimplementedGophKeeperServerServer) AbortMultipartFileUpload(context.Context, *AbortMultipartFileUploadRequest) (*AbortMultipartFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortMultipartFileUpload not implemented")
}
func (UnimplementedGophKeeperServerServer) mustEmbedUnimplementedGophKeeperServerServer() {}

// UnsafeGophKeeperServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophKeeperServerServer will
// result in compilation errors.
type UnsafeGophKeeperServerServer interface {
	mustEmbedUnimplementedGophKeeperServerServer()
}

func RegisterGophKeeperServerServer(s grpc.ServiceRegistrar, srv GophKeeperServerServer) {
	s.RegisterService(&GophKeeperServer_ServiceDesc, srv)
}

func _GophKeeperServer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperServer_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperServer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperServer_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServerServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperServer_ListVaultItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVaultItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServerServer).ListVaultItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperServer_ListVaultItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServerServer).ListVaultItems(ctx, req.(*ListVaultItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperServer_SetVaultItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVaultItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServerServer).SetVaultItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperServer_SetVaultItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServerServer).SetVaultItem(ctx, req.(*SetVaultItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperServer_GetFileDownloadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileDownloadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServerServer).GetFileDownloadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperServer_GetFileDownloadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServerServer).GetFileDownloadURL(ctx, req.(*GetFileDownloadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperServer_GetFileUploadURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileUploadURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServerServer).GetFileUploadURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperServer_GetFileUploadURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServerServer).GetFileUploadURLs(ctx, req.(*GetFileUploadURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperServer_CompleteMultipartFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMultipartFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServerServer).CompleteMultipartFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperServer_CompleteMultipartFileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServerServer).CompleteMultipartFileUpload(ctx, req.(*CompleteMultipartFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperServer_AbortMultipartFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortMultipartFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperServerServer).AbortMultipartFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperServer_AbortMultipartFileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperServerServer).AbortMultipartFileUpload(ctx, req.(*AbortMultipartFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GophKeeperServer_ServiceDesc is the grpc.ServiceDesc for GophKeeperServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophKeeperServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.grpc.server.GophKeeperServer",
	HandlerType: (*GophKeeperServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _GophKeeperServer_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GophKeeperServer_Login_Handler,
		},
		{
			MethodName: "ListVaultItems",
			Handler:    _GophKeeperServer_ListVaultItems_Handler,
		},
		{
			MethodName: "SetVaultItem",
			Handler:    _GophKeeperServer_SetVaultItem_Handler,
		},
		{
			MethodName: "GetFileDownloadURL",
			Handler:    _GophKeeperServer_GetFileDownloadURL_Handler,
		},
		{
			MethodName: "GetFileUploadURLs",
			Handler:    _GophKeeperServer_GetFileUploadURLs_Handler,
		},
		{
			MethodName: "CompleteMultipartFileUpload",
			Handler:    _GophKeeperServer_CompleteMultipartFileUpload_Handler,
		},
		{
			MethodName: "AbortMultipartFileUpload",
			Handler:    _GophKeeperServer_AbortMultipartFileUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/api/server.proto",
}
